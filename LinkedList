#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
    Node(int data)
    {
        this->data = data;
        this->next = NULL;
    }
};

Node *head = NULL;
int length = 0;

//length of linked list
int lengthOfList()
{
    Node *current = head;
    int length = 0;
    while (current != NULL)
    {
        current = current->next;
        length++;
    }
    return length;
}

//insert element at the start of linked list
void insertAtStart(int data)
{
    Node *newNode = new Node(data);
    Node *current = head;
    head = newNode;
    head->next = current;
    length++;
}

//insert element at last of linked list
void insertAtLast(int data)
{
    Node *newNode = new Node(data);
    if (head == NULL)
        head = newNode;
    else
    {
        Node *current = head;
        while (current->next != NULL)
        {
            current = current->next;
        }
        current->next = newNode;
    }
    length++;
}

//insert element at nth position
void insertAtNth(int data, int n)
{
    Node *newNode = new Node(data);
    if (n == 1)
        insertAtStart(data);
    else if (n < 0 || n > length)
        cout << "Invalid position";
    else
    {
        Node *current = head;
        for (int i = 0; i < n - 2; i++)
        {
            current = current->next;
        }
        Node *temp = current->next;
        current->next = newNode;
        newNode->next = temp;
    }
    length++;
}

//delete element from front
void deleteFromStart()
{
    if (length == 0)
        cout << "Linked List is empty";
    else
    {
        head = head->next;
        length--;
    }
}

//delete from End
void deleteFromEnd()
{
    if (length == 0)
        cout << "Linked List is empty";
    else
    {
        Node *current = head;
        Node *prev = head;
        while (current->next != NULL)
        {
            prev = current;
            current = current->next;
        }
        prev->next = NULL;
        current = NULL;
        length--;
    }
}

//delete at Nth position
void deleteFromNth(int n)
{
    if (length == 0)
        cout << "Linked List is empty";
    else if (n < 0 || n > length)
        cout << "Invalid position";
    else if (n == 1)
        deleteFromStart();
    else
    {
        Node *current = head;
        for (int i = 0; i < n - 2; i++)
        {
            current = current->next;
        }
        current->next = current->next->next;
        length--;
    }
}

//middle of linked list
Node *middleOfList()
{
    Node *slow = head;
    Node *fast = head;
    while (fast != NULL && fast->next != NULL)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

//reverse linked list using iteration
void reverse()
{
    Node *current = head;
    Node *prev = NULL;
    while (current != NULL)
    {
        Node *Next = current->next;
        current->next = prev;
        prev = current;
        current = Next;
    }
    head = prev;
}

//reverse linked list using recursion
void reverseRecursion()
{
    Node *current = head;
}

//print elemens of linked list
void print(Node *head)
{
    Node *current = head;
    while (current != NULL)
    {
        cout << current->data << " ";
        current = current->next;
    }
    /* print using recursion
    if (head == NULL)
        return;
    cout << head->data << " ";
    print(head->next);*/
}

int main()
{
    insertAtLast(10);
    insertAtLast(20);
    insertAtLast(30);
    insertAtLast(40);
    insertAtNth(50, 3);
    print(head);
    cout << endl;
    Node *middle = middleOfList();
    cout << middle->data << endl;
    reverse();
    print(head);
    return 0;
}
