/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/

public class Main
{
    private ListNode head;
    private static class ListNode{
        private int data;
        private ListNode next;
        public ListNode(int data){
            this.data=data;
            this.next=next;
        }
    }
    
    //length of linked list
    public int findLength(){
        if(head==null)
            return 0;
        int count=0;
        ListNode current=head;
        while(current!=null){
            count++;
            current=current.next;
        }
        return count;
    }
    
    //insert at begin
    public void insertAtBegin(int data){
        ListNode current=new ListNode(data);
        current.next=head;
        head=current;
    }
    
    //insert at end
    public void insertAtEnd(int data){
        ListNode current=new ListNode(data);
        if(head==null)
            head=current;
        else{
            ListNode temp=head;
            while(temp.next!=null){
                temp=temp.next;
            }
            temp.next=current;
        }
    }
    
    //insert at given position
    public void insertAtPos(int data,int pos){
        ListNode newNode=new ListNode(data);
        if(pos==1){
            newNode.next=head;
            newNode=head;
            return;
        }
        ListNode prev=head;
        for(int i=0;i<pos-2;i++){
            prev=prev.next;
        }
        ListNode current=prev.next;
        prev.next=newNode;
        newNode.next=current;
    }
    
    //delete from begin
    public ListNode deleteFromBegin(){
        if(head==null){
            return null;
        }
        head=head.next;
        return head;
    }
    
    //delete from end
    public ListNode deleteFromEnd(){
        if(head==null || head.next!=null)
            return head;
        ListNode current=head;
        ListNode prev=null;
        while(current.next!=null){
            prev=current;
            current=current.next;
        }
        prev.next=null;
        return head;
    }
    
    //delete at given position
    public void deleteAtPos(int pos){
        int len=findLength();
        if(pos<0 || pos>=len){
            System.out.println("Invalid");
            return;
        }
        if(pos==1){
            head=head.next;
            return;
        }    
        ListNode prev=head;
        for(int i=0;i<pos-2;i++){
            prev=prev.next;
        }
        ListNode current=prev.next;
        prev.next=current.next;
    }
    
    //find middle of the linked list
    public ListNode middle(){
        if(head==null)
            return null;
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    
    //finding Nth node from the end
    public ListNode findNth(int n){
        if(head==null)
            return head;
        if(n<=0){
            throw new IllegalArgumentException("Invalid value:"+n);    
        }
        
        ListNode slow=head;
        ListNode fast=head;
        for(int i=0;i<n;i++){
            fast=fast.next;
        }
        while(fast!=null){
            slow=slow.next;
            fast=fast.next;
        }
        return slow;
    }
    
    //remove duplicates from sorted linked List
    public void removeDuplicate(){
        if(head==null)
            return;
        ListNode temp=head;
        while(temp!=null && temp.next!=null){
            if(temp.data==temp.next.data){
                temp.next=temp.next.next;
            }
            temp=temp.next;
        }
    }
    
    //insert in sorted list
    public void insertInSortedList(int data){
        ListNode newNode=new ListNode(data);
        ListNode current=head;
        ListNode prev=null;
        while(current.data<newNode.data){
            prev=current;
            current=current.next;
        }
        prev.next=newNode;
        newNode.next=current.next;
    }
    
    public void deleteKey(int key){
        if(head==null)
            return;
        ListNode current=head;
        ListNode prev=null;
        while(current!=null && current.next!=null){
            prev=current;
            if(current.data==key){
                prev.next=current.next;
            }
        }
    }
    
    public boolean detectLoop(){
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)
                return true;
        }
        return false;
    }
    //display all the nodes of linked list
    public void display(){
        ListNode current=head;
        while(current!=null){
            System.out.print(current.data+"->");
            current=current.next;
        }
    }
    
	public static void main(String[] args) {
		Main sll=new Main();
		sll.insertAtBegin(30);
		sll.insertAtBegin(20);
		sll.insertAtBegin(10);
		sll.insertAtEnd(40);
		sll.insertAtEnd(40);
		sll.insertAtEnd(50);
		sll.insertAtEnd(50);
		sll.insertInSortedList(35);
		//sll.deleteKey(30);
		//sll.deleteFromBegin();
		//sll.deleteFromEnd();
		//sll.insertAtPos(60,3);
		//sll.insertAtPos(70,4);
		//sll.deleteAtPos(4);
		//System.out.println(sll.middle().data);
		//System.out.println(sll.findNth(3).data);
		System.out.println(sll.detectLoop());
		sll.removeDuplicate();
		int length=sll.findLength();
		System.out.println(length);
		
		sll.display();
	}
}




